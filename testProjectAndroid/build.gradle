// An Android application project.

apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'

buildscript {
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.0'
        classpath 'junit:junit:4.7'
        classpath 'org.jacoco:org.jacoco.core:0.7.4.201502262128'
    }
}

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "io.grpc.helloworldexample"
        minSdkVersion 7
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
        jackOptions {
          enabled true
        }
    }
    flavorDimensions 'abi', 'version'
    productFlavors {
        freeapp {
          dimension 'version'
        }
        retailapp {
          dimension 'version'
        }
        x86 {
          dimension 'abi'
        }
        arm {
          dimension 'abi'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        androidTest {}
    }
}

protobuf {
  protoc {
    artifact = 'com.google.protobuf:protoc:3.0.0-alpha-3'
  }
  plugins {
    grpc {
      artifact = 'io.grpc:protoc-gen-grpc-java:0.7.0'
    }
  }
  generateProtoTasks {
    all()*.builtins {
      javanano {
        // Options added to --javanano_out
        option 'java_multiple_files=false'
        option 'ignore_services=true'
      }
    }
    ofNonTest()*.plugins {
      grpc {
        // Options added to --grpc_out
        option 'nano=true'
      }
    }
  }
}

dependencies {
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.google.code.findbugs:jsr305:3.0.0'
    compile 'com.squareup.okhttp:okhttp:2.2.0'
    compile 'com.google.guava:guava:18.0'
    compile 'javax.annotation:javax.annotation-api:1.2'
    compile 'com.google.protobuf.nano:protobuf-javanano:3.0.0-alpha-3'
    compile 'io.grpc:grpc-core:0.7.0'
    compile 'io.grpc:grpc-okhttp:0.7.0'
    compile 'io.grpc:grpc-stub:0.7.0'
    compile 'io.grpc:grpc-protobuf-nano:0.7.0'
    compile project(':testProject')
    protobuf files('lib/protos.jar')
}

def assertJavaCompileHasProtoGeneratedDir(Object variant, Collection<String> codegenPlugins) {
  assertJavaCompileHasProtoGeneratedDir(project, variant.name, variant.javaCompile, codegenPlugins)
}

afterEvaluate {
  // 'gradle test' will run the unit tests, which is still experimental in
  // Android plugin, and would do nothing with our setup. We make 'test' to
  // trigger the "androidTest" Java compile tasks.
  android.testVariants.each { testVariant ->
    test.dependsOn testVariant.javaCompile
  }

  test.doLast {
    org.junit.Assert.assertEquals(
        ['generateArmFreeappDebugAndroidTestProto', 'generateArmFreeappDebugProto',
         'generateArmFreeappReleaseProto', 'generateArmRetailappDebugAndroidTestProto',
         'generateArmRetailappDebugProto', 'generateArmRetailappReleaseProto',
         'generateX86FreeappDebugAndroidTestProto', 'generateX86FreeappDebugProto',
         'generateX86FreeappReleaseProto', 'generateX86RetailappDebugAndroidTestProto',
         'generateX86RetailappDebugProto', 'generateX86RetailappReleaseProto'] as Set,
         protobuf.generateProtoTasks.all().collect({ it.name }) as Set)
    org.junit.Assert.assertEquals(
        ['generateArmFreeappDebugAndroidTestProto',
         'generateArmRetailappDebugAndroidTestProto',
         'generateX86FreeappDebugAndroidTestProto',
         'generateX86RetailappDebugAndroidTestProto'] as Set,
         protobuf.generateProtoTasks.ofTest().collect({ it.name }) as Set)
    org.junit.Assert.assertEquals(
        ['generateArmFreeappDebugProto', 'generateArmFreeappReleaseProto',
         'generateArmRetailappDebugProto', 'generateArmRetailappReleaseProto',
         'generateX86FreeappDebugProto', 'generateX86FreeappReleaseProto',
         'generateX86RetailappDebugProto', 'generateX86RetailappReleaseProto'] as Set,
         protobuf.generateProtoTasks.ofNonTest().collect({ it.name }) as Set)
    org.junit.Assert.assertEquals(
        ['generateArmFreeappDebugAndroidTestProto', 'generateArmFreeappDebugProto',
         'generateArmFreeappReleaseProto',
         'generateX86FreeappDebugAndroidTestProto', 'generateX86FreeappDebugProto',
         'generateX86FreeappReleaseProto'] as Set,
         protobuf.generateProtoTasks.ofFlavor('freeapp').collect({ it.name }) as Set)
    org.junit.Assert.assertEquals(
        ['generateArmRetailappDebugAndroidTestProto', 'generateArmRetailappDebugProto',
         'generateArmRetailappReleaseProto',
         'generateX86RetailappDebugAndroidTestProto', 'generateX86RetailappDebugProto',
         'generateX86RetailappReleaseProto'] as Set,
         protobuf.generateProtoTasks.ofFlavor('retailapp').collect({ it.name }) as Set)
    org.junit.Assert.assertEquals(
        ['generateX86FreeappDebugAndroidTestProto', 'generateX86FreeappDebugProto',
         'generateX86FreeappReleaseProto', 'generateX86RetailappDebugAndroidTestProto',
         'generateX86RetailappDebugProto', 'generateX86RetailappReleaseProto'] as Set,
         protobuf.generateProtoTasks.ofFlavor('x86').collect({ it.name }) as Set)
    org.junit.Assert.assertEquals(
        ['generateArmFreeappDebugAndroidTestProto', 'generateArmFreeappDebugProto',
         'generateArmFreeappReleaseProto', 'generateArmRetailappDebugAndroidTestProto',
         'generateArmRetailappDebugProto', 'generateArmRetailappReleaseProto'] as Set,
         protobuf.generateProtoTasks.ofFlavor('arm').collect({ it.name }) as Set)
    org.junit.Assert.assertEquals(
        ['generateArmFreeappDebugAndroidTestProto', 'generateArmFreeappDebugProto',
         'generateArmRetailappDebugAndroidTestProto',
         'generateArmRetailappDebugProto',
         'generateX86FreeappDebugAndroidTestProto', 'generateX86FreeappDebugProto',
         'generateX86RetailappDebugAndroidTestProto',
         'generateX86RetailappDebugProto'] as Set,
         protobuf.generateProtoTasks.ofBuildType('debug').collect({ it.name }) as Set)
    org.junit.Assert.assertEquals(
        ['generateArmFreeappReleaseProto', 'generateArmRetailappReleaseProto',
         'generateX86FreeappReleaseProto', 'generateX86RetailappReleaseProto'] as Set,
         protobuf.generateProtoTasks.ofBuildType('release').collect({ it.name }) as Set)
    org.junit.Assert.assertEquals(
        ['generateX86FreeappDebugAndroidTestProto'] as Set,
         protobuf.generateProtoTasks.ofVariant('x86FreeappDebugAndroidTest').collect({ it.name }) as Set)
    // "androidTest" sourceSet is not a flavor
    org.junit.Assert.assertEquals(
        [] as Set,
         protobuf.generateProtoTasks.ofFlavor('androidTest').collect({ it.name }) as Set)
    android.applicationVariants.each { variant ->
      assertJavaCompileHasProtoGeneratedDir(variant, ['javanano', 'grpc'])
    }
    android.testVariants.each { variant ->
      assertJavaCompileHasProtoGeneratedDir(variant, ['javanano'])
    }
  }
}
